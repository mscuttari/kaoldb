/*
 * Copyright 2018 Scuttari Michele
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * OSSRH release configuration
 **/

ext {
    libraryName = 'KaolDB'
    libraryVersion = '1.1.2'
    publishedGroupId = 'it.mscuttari.kaoldb'
    packagingType = 'jar'

    siteUrl = 'https://github.com/mscuttari/KaolDB'
    gitUrl = 'https://github.com/mscuttari/KaolDB.git'

    developerId = 'mscuttari'
    developerName = 'Michele Scuttari'
    developerEmail = 'info@mscuttari.it'

    licenseName = 'The Apache License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
}

apply plugin: 'signing'
apply plugin: 'maven'

signing {
    useGpgCmd()
    sign configurations.archives
}

if (project.hasProperty("android")) {
    // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    apply plugin: "org.jetbrains.dokka-android"

    task dokkaJavadoc(type: dokka.getClass()) {
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/javadoc"
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        classifier = 'javadoc'
        from "$buildDir/javadoc"
    }
} else {
    // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    apply plugin: "org.jetbrains.dokka"

    task dokkaJavadoc(type: dokka.getClass()) {
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/javadoc"
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        classifier = 'javadoc'
        from "$buildDir/javadoc"
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

group = publishedGroupId
version = libraryVersion

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: System.getenv("ossrhUser"), password: System.getenv("ossrhPassword"))
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: System.getenv("ossrhUser"), password: System.getenv("ossrhPassword"))
            }

            pom.project {
                packaging packagingType
                groupId publishedGroupId
                artifactId project.name

                name libraryName
                description project.description
                url siteUrl

                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }

                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }

                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

uploadArchives.dependsOn assemble
uploadArchives.dependsOn sourcesJar
uploadArchives.dependsOn javadocJar
